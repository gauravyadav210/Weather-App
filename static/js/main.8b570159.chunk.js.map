{"version":3,"sources":["WeatherApp.js","MyComponent.js","App.js","reportWebVitals.js","index.js"],"names":["api","key","base","App","search","setSearch","useState","weather","setWeather","React","createElement","className","type","placeholder","onChange","e","target","value","onClick","searchPressed","fetch","concat","then","res","json","result","main","name","temp","description","sys","country","coord","lat","lon","Date","toLocaleDateString","toLocaleTimeString","locations","setLocations","filteredLocations","setFilteredLocations","page","setPage","searchQuery","setSearchQuery","sortConfig","setSortConfig","direction","loader","useRef","useEffect","async","response","data","prevLocations","results","error","console","fetchData","filtered","filter","location","toLowerCase","includes","sortedLocations","sort","a","b","observer","IntersectionObserver","entries","isIntersecting","prevPage","root","rootMargin","threshold","current","observe","unobserve","handleSort","event","map","geoname_id","onContextMenu","handleCityNameRightClick","cityName","preventDefault","window","open","href","cou_name_en","timezone","ref","WeatherApp","MyComponent","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.8b570159.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport \"./WeatherApp.css\";\nimport MyComponent from './MyComponent'\nimport { useState } from \"react\";\n// const WeatherApp = () => {\n\nconst api = {\n  key: \"9ef5597e15638fedc67a522dc35ba0ee\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [search, setSearch] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  /*\n    Search button is pressed. Make a fetch call to the Open Weather Map API.\n  */\n  const searchPressed = () => {\n    fetch(`${api.base}weather?q=${search}&units=metric&APPID=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setWeather(result);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* HEADER  */}\n        <h2>My Weather App \n        </h2>\n        <h1>Please Enter Your City</h1>\n\n        {/* Search Box - Input + Button  */}\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Enter city/town...\"\n            onChange={(e) => setSearch(e.target.value)}\n          />\n          <button onClick={searchPressed}>Search</button>\n        </div>\n        <div>\n            \n            <h1>\n            \n            Please scroll down.....\n            </h1>\n\n        </div>\n\n        {/* If weather is not undefined display results from API */}\n        {typeof weather.main !== \"undefined\" ? (\n          <div>\n        \n            Location Details\n            <p>{weather.name}</p>\n            \n            Temperature Celsius \n            <p>{weather.main.temp}Â°C</p>\n            Weather Condition\n            <p>{weather.weather[0].main}</p>\n            <p>({weather.weather[0].description})</p>\n            Country Name\n            <p>{weather.sys.country}</p>\n            <p>Latitude: {weather.coord.lat}</p>\n            <p>Longitude: {weather.coord.lon}</p>\n          \n            <p>\n            Date: {new Date().toLocaleDateString()}\n            \n              </p>\n              <p>\n              Time: {new Date().toLocaleTimeString()}\n            </p>\n            <br />\n            \n          </div>\n        ) : (\n          \"\"\n        )}\n      </header>\n    </div>\n    \n  );\n}\n\nexport default App;\n","import React, { useEffect, useState, useRef, setSearch } from 'react';\nimport './App.css'; //Here you can Import CSS file for styling\nimport WeatherApp from './WeatherApp';\nexport const cityName = []\nfunction App() {\n  const [locations, setLocations] = useState([]); // State to store locations from the site\n  const [filteredLocations, setFilteredLocations] = useState([]); \n  const [page, setPage] = useState(1); \n  const [searchQuery, setSearchQuery] = useState(''); \n  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' }); \n  const loader = useRef(null); \n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch data from the API\n        const response = await fetch(`https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/geonames-all-cities-with-a-population-1000/records?limit=50`);\n        const data = await response.json();\n        // Update locations state with new data\n        setLocations(prevLocations => [...prevLocations, ...data.results]);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData(); \n  }, [page]);\n\n  useEffect(() => {\n  \n    const filtered = locations.filter(location =>\n      location.name.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    setFilteredLocations(filtered);\n  }, [searchQuery, locations]);\n\n  useEffect(() => {\n    if (sortConfig.key !== null) {\n    \n      const sortedLocations = [...filteredLocations].sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'asc' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'asc' ? 1 : -1;\n        }\n        return 0;\n      });\n      setFilteredLocations(sortedLocations);\n    }\n  }, [sortConfig]);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      entries => {\n        const target = entries[0];\n        if (target.isIntersecting) {\n          setPage(prevPage => prevPage + 1);\n        }\n      },\n      {\n        root: null,\n        rootMargin: '20px',\n        threshold: 0.1,\n      }\n    );\n\n    if (loader.current) {\n      \n      observer.observe(loader.current);\n    }\n\n    return () => {\n      if (loader.current) {\n      \n        observer.unobserve(loader.current);\n      }\n    };\n  }, []); \n\n  const handleSearchChange = event => {\n    \n    setSearchQuery(event.target.value);\n  };\n\n  const handleSort = key => {\n    \n    if (sortConfig.key === key) {\n      setSortConfig({ ...sortConfig, direction: sortConfig.direction === 'asc' ? 'desc' : 'asc' });\n    } else {\n      setSortConfig({ key, direction: 'asc' });\n    }\n  };\n\n  const handleCityNameRightClick = (event, cityName) => {\n    \n    event.preventDefault();\n    // Open weather page for the city in a new tab\n    window.open(`https://openweathermap.org/find?q=${cityName}`, '_blank');\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Locations</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Search locations...\"\n        value={searchQuery}\n        onChange={handleSearchChange}\n\n      />\n      <table>\n\n        <thead>\n          <tr>\n            <th onClick={() => handleSort('name')}>City Name</th>\n            <th onClick={() => handleSort('cou_name_en')}>Country</th>\n            <th onClick={() => handleSort('timezone')}>Timezone</th>\n            {/* Add more column headers as needed */}\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredLocations.map(location => (\n            <tr key={location.geoname_id}>\n              <td\n                onContextMenu={event => handleCityNameRightClick(event, location.name)}\n              >\n                <a href={`https://openweathermap.org/find?q=${location.name}`}>{location.name}</a>\n              </td>\n              <td>{location.cou_name_en}</td>\n              <td>{location.timezone}</td>\n              {/* Display more information in additional columns */}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div ref={loader} className=\"loader\">Loading...</div> {/* Loader element */}\n    </div>\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport MyComponent, { cityName } from './MyComponent';\nimport WeatherApp from './WeatherApp';\nimport './App.css';\n// export cityName from './MyComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherApp />\n      <MyComponent />\n      {/* <WeatherApp /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport './MyComponent';\nimport './WeatherPage'\n// import './TablePage';\n// import './Weather'\n// import './server'\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}